use crate::ast;
// use std::str::FromStr;

grammar;

pub Binding: ast::Binding = {
    <b:Binder> <bm:BindingMask> <blk:Block> => (b, bm, blk).into(),
};

pub BindingMask: ast::Mask = {
    <m:(":" Mask?)?> "=" => match m {
        Some((_,Some(m))) => m,
        Some((_,None))    => ast::Mask::Exposed { binders: vec![] },
        None              => ast::Mask::Closed,
    },
};

Mask: ast::Mask = {
    "[" "*" "]" => ast::Mask::All,
    "[" <binders: SemiColon<Binder>> "]" => ast::Mask::Exposed { binders },
};

pub Block: ast::Block = {
    "[" <SemiColon<Binding>> "]" => <>.into(),
    "[" <Block> "]",
};

// Identifiers

Binder: ast::Binder = r"[a-zA-Z][0-9a-zA-Z]*'*" => <>.into();

// Const

// INTCONST: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();

// Utility

SemiColon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
