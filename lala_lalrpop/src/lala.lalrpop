use crate::ast;
// use std::str::FromStr;

grammar;

pub Binder: ast::Binder = r"[a-zA-Z][0-9a-zA-Z]*'*" => ast::Binder::from(<>);

pub Binding: ast::Binding = {
    <b:Binder> <bm:BindingMask> <blk:Block> => ast::Binding { name: b, expose: bm, block: blk },
};

pub BindingMask: Option<Vec<ast::Binder>> = {
    <m:(":" Mask?)?> "=" => match m {
        Some((_,Some(m))) => Some(m),
        Some((_,None)) => Some(vec![]),
        None    => None,
    },
};

pub Mask : Vec<ast::Binder> = {
    "[" "*"? "]" => vec![],
    "[" <mut mbs:MaskBinderVec> "]" => {
        mbs.reverse();
        mbs
    }
};

pub MaskBinderVec : Vec<ast::Binder> = {
    <b:Binder> ";" <mut bs:MaskBinderVec> => {
        bs.push(b);
        bs
    },
    <Binder> => vec![<>],
};

pub BindingVec: Vec<ast::Binding> = {
    <b:Binding> ";" <mut bs:BindingVec> => {
        bs.push(b);
        bs
    },
    <Binding> => vec![<>],
};

pub Block: ast::Block = {
    "[" "]" => ast::Block { bindings: vec![] },
    "[" <mut bs:BindingVec> "]" => {
        ast::Block { 
            bindings: {
                bs.reverse();
                bs
            } 
        }
    },
    "[" <Block> "]",
};

// INTCONST: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();