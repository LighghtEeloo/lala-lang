use crate::ast::*;
// use std::str::FromStr;

grammar;

pub LaLa: Block = {
    <Block>,
    <SemiColon<Binding>> => Sequential::from(<>).into()
};

pub Binding: Binding = {
    <b:Binder> <bm:BindingMask> <blk:Block> => (b, bm, blk).into(),
    <b:Binder> <args:SpacedOnce<Binder>> <bm:BindingMask> <blk:Block> => (b, args, bm, blk).into(),
};

BindingMask: Mask = {
    ":" <Mask?> "=" => match <> {
        Some(m) => m,
        None    => Mask::Exposed,
    },
    "=" => Mask::Closed,
};

Mask: Mask = {
    "[" "*" "]" => Mask::Open,
    "*" => Mask::Open,
    "[" <SemiColon<Binder>> "]" => <>.into(),
    <SemiColonOnce<Binder>> => <>.into(),
};

pub Sequential: Sequential = {
    "[" <SemiColon<Binding>> "]" => Sequential::from(<>),
    "[" <Sequential> "]",
};

pub Parallel: Parallel = {
    "{" <SemiColon<Binding>> "}" => Parallel::from(<>).into(),
    "{" <Parallel> "}",
};

pub Block: Block = {
    <Sequential> => <>.into(),
    <Parallel>   => <>.into(),
};

// Identifiers

Binder: Binder = {
    <IDENT> => Binder::Identity(<>),
    <UIDENT> => {
        let s = <>.strip_prefix("_").unwrap().into();
        Binder::Anonymous(s)
    },
    <UNDERSCORE> => Binder::Arbitrary
};

IDENT: String = r"[a-zA-Z][_0-9a-zA-Z]*'*" => <>.into();
UIDENT: String = r"_+[a-zA-Z][_0-9a-zA-Z]*'*" => <>.into();
UNDERSCORE: String = "_" => <>.into();

// Const

// INTCONST: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();

// Utility

Spaced<T>: Vec<T> = {
    <mut v:T*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

SpacedOnce<T>: Vec<T> = {
    <mut v:T*> <e:T> => {
        v.push(e);
        v
    }
};

SemiColon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

SemiColonOnce<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T> => {
        v.push(e);
        v
    }
};
