use crate::nana_ast::*;

grammar;

pub Nana: Nana = {
    <BlockInner> => <>.into(),
};

Block: Block = {
    "(" <bi:BlockInner> ")" => {
        let (bds, vls) = bi;
        Block::Tuple(bds, vls)
    },
    "[" <bi:BlockInner> "]" => {
        let (bds, vls) = bi;
        Block::List(bds, vls)
    },
    "{" <bi:BlockInner> "}" => {
        let (bds, vls) = bi;
        Block::Set(bds, vls)
    },
    // "{" <bi:BlockInnerMap> "}" => B{
    //     let (bds, vls) = bi;
    //     Block::Map(bds, vls)
    // },
};

BlockInner: (Vec<Abstraction>, Vec<Expr>) = {
    <bds:BinderSpace> <vls:ValueSpaceExpr> => (bds, vls),
};
BlockInnerMap: (Vec<Abstraction>, Vec<Pair>) = {
    <bds:BinderSpace> <vls:ValueSpacePair> => (bds, vls),
};

#[inline]
BinderSpace: Vec<Abstraction> = <Abstraction*>;

#[inline]
ValueSpaceExpr: Vec<Expr> = Comma<Expr>;
#[inline]
ValueSpacePair: Vec<Pair> = CommaOnce<Pair>; // To avoid confusion

// Todo: Pattern
Abstraction: Abstraction = {
    <b:Binder> <br:Bridge> <e:Expr> ";" => {
        (b, br, e).into()
    },
};

Binder: Binder = {
    <IDENT> => <>.into(),
};

Bridge: bool = {
    ":=" => true,
    "=" => false,
};

Pair: Pair = {
    <a:AtomExpr> ":" <e:Expr> => (a, e).into()
};

// Todo: FlowExpr; InfixExpr.
Expr: Expr = {
    <AppExpr>,
    <GatedBlock> => Expr::GatedBlock(<>),
};

// Todo: Pattern; AtomExpr.
GatedBlock: GatedBlock = {
    "|" <args:Comma<Binder>> "|" <blk:Block> => {
        (args, blk).into()
    }
};

AppExpr: Expr = {
    <AtomExpr>,
    <f:AppExpr> <a:AtomExpr> => 
        Expr::Application(Box::new(f), Box::new(a)),
};

AtomExpr: Expr = {
    <Literal> => Expr::Literal(<>),
    <Binder> => Expr::Binder(<>),
    <Block> => Expr::Block(<>),
    <Projection> => {
        let (a, b) = <>;
        Expr::Projection(Box::new(a), b)
    }
};

Literal: Literal = {
    <INTCONST> => Literal::Int(<>),
    <FLTCONST> => Literal::Float(<>),
    <STRCONST> => Literal::Str(<>),
    <RAWCONST> => Literal::Raw(<>),
};

Projection: (Expr, Binder) = {
    <a:AtomExpr> "." <b:Binder> => (a, b),
};

// Identifiers

IDENT: String = r"[a-zA-Z][_0-9a-zA-Z]*'*" => <>.into();
UIDENT: String = r"_[a-zA-Z][_0-9a-zA-Z]*'*" => <>.into();
WILDCARD: String = "_" => <>.into();
FORTHEREST: String = ".." => <>.into();
SYMBOLIDENT: String = "(" <syn:r"[~!@#$%^&/\?\|\+\*]"> ")" => syn.into();


// Const

INTCONST: u64 = {
    r"[0-9]+" => <>.parse::<u64>().unwrap(),
    r"0[xX][0-9a-fA-F]+" => {
        let s = <>
            .trim_start_matches("0x")
            .trim_start_matches("0X");
        u64::from_str_radix(s, 16).unwrap()
    },
};
FLTCONST: f64 = {
    r"[0-9]*\.[0-9]+([eE][-\+]?[0-9]+)?" => <>.parse::<f64>().unwrap(),
    r"[0-9]+[eE][-\+]?[0-9]+" => <>.parse::<f64>().unwrap(),
};
STRCONST: String = r#""([^"\\]|\\.)*""# => <>.into();
RAWCONST: String = r"\[\|.*\|\]" => <>.into();

// Utility

#[inline]
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
CommaOnce<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
};

#[inline]
SemiColon<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

#[inline]
SemiColonOnce<T>: Vec<T> = {
    <mut v:(<T> ";")*> <e:T> => {
        v.push(e);
        v
    }
};
